# Generated by Django 5.2.6 on 2025-09-24 17:19

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0005_conversation_analysis_language'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GrammarConcept',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        help_text='Human-readable name of the grammar concept',
                        max_length=200,
                    ),
                ),
                (
                    'description',
                    models.TextField(
                        help_text='Detailed description of the grammar concept'
                    ),
                ),
                (
                    'language',
                    models.CharField(
                        choices=[
                            ('en', 'English'),
                            ('es', 'Spanish'),
                            ('de', 'German'),
                        ],
                        help_text='Language this concept applies to',
                        max_length=2,
                    ),
                ),
                (
                    'cefr_level',
                    models.CharField(
                        choices=[
                            ('A1', 'A1 - Beginner'),
                            ('A2', 'A2 - Elementary'),
                            ('B1', 'B1 - Intermediate'),
                            ('B2', 'B2 - Upper-Intermediate'),
                            ('C1', 'C1 - Advanced'),
                            ('C2', 'C2 - Proficient'),
                        ],
                        help_text='CEFR level where this concept is typically learned',
                        max_length=2,
                    ),
                ),
                (
                    'complexity_score',
                    models.FloatField(
                        help_text='Complexity rating from 0 (simple) to 10 (complex)',
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    'embedding',
                    models.JSONField(
                        blank=True,
                        help_text='Vector embedding for similarity searches',
                        null=True,
                    ),
                ),
                (
                    'tags',
                    models.JSONField(
                        default=list,
                        help_text="Tags for categorizing concepts (e.g., ['verbs', 'tenses'])",
                    ),
                ),
                (
                    'example_sentences',
                    models.JSONField(
                        default=list,
                        help_text='Example sentences demonstrating the concept',
                    ),
                ),
                (
                    'common_errors',
                    models.JSONField(
                        default=list,
                        help_text='Common mistakes learners make with this concept',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'prerequisite_concepts',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Concepts that should be learned before this one',
                        related_name='dependent_concepts',
                        to='chat.grammarconcept',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Grammar Concept',
                'verbose_name_plural': 'Grammar Concepts',
            },
        ),
        migrations.CreateModel(
            name='ErrorPattern',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'error_type',
                    models.CharField(
                        choices=[
                            ('grammar', 'Grammar'),
                            ('spelling', 'Spelling'),
                            ('vocabulary', 'Vocabulary'),
                            ('syntax', 'Syntax'),
                            ('punctuation', 'Punctuation'),
                            ('word_order', 'Word Order'),
                            ('verb_tense', 'Verb Tense'),
                            ('articles', 'Articles'),
                            ('prepositions', 'Prepositions'),
                            ('other', 'Other'),
                        ],
                        help_text='Category of error',
                        max_length=20,
                    ),
                ),
                (
                    'error_description',
                    models.TextField(
                        help_text='Description of the specific error pattern'
                    ),
                ),
                (
                    'frequency',
                    models.IntegerField(
                        default=1, help_text='How many times this error has occurred'
                    ),
                ),
                (
                    'first_seen',
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text='When this error pattern was first identified',
                    ),
                ),
                (
                    'last_seen',
                    models.DateTimeField(
                        auto_now=True, help_text='When this error was last observed'
                    ),
                ),
                (
                    'is_resolved',
                    models.BooleanField(
                        default=False,
                        help_text='Whether this error pattern has been resolved',
                    ),
                ),
                (
                    'example_errors',
                    models.JSONField(
                        default=list,
                        help_text='Example sentences where this error occurred',
                    ),
                ),
                (
                    'correction_suggestions',
                    models.JSONField(
                        default=list, help_text='Suggested corrections and explanations'
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        help_text='User who made these errors',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='error_patterns',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'related_concepts',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Grammar concepts related to this error',
                        related_name='related_errors',
                        to='chat.grammarconcept',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Error Pattern',
                'verbose_name_plural': 'Error Patterns',
            },
        ),
        migrations.CreateModel(
            name='ConceptMastery',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'mastery_score',
                    models.FloatField(
                        default=0.0,
                        help_text='Current mastery level (0.0 = not learned, 1.0 = mastered)',
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    'confidence_level',
                    models.FloatField(
                        default=0.0,
                        help_text='Confidence in the mastery assessment',
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    'attempts_count',
                    models.IntegerField(
                        default=0, help_text='Total number of practice attempts'
                    ),
                ),
                (
                    'correct_attempts',
                    models.IntegerField(
                        default=0, help_text='Number of correct attempts'
                    ),
                ),
                (
                    'last_practiced',
                    models.DateTimeField(
                        blank=True,
                        help_text='Last time this concept was practiced',
                        null=True,
                    ),
                ),
                (
                    'last_seen_correct',
                    models.DateTimeField(
                        blank=True,
                        help_text='Last time user got this concept correct',
                        null=True,
                    ),
                ),
                (
                    'next_review',
                    models.DateTimeField(
                        blank=True,
                        help_text='When this concept should be reviewed next (spaced repetition)',
                        null=True,
                    ),
                ),
                (
                    'repetition_interval',
                    models.IntegerField(
                        default=1,
                        help_text='Current spaced repetition interval in days',
                    ),
                ),
                (
                    'ease_factor',
                    models.FloatField(
                        default=2.5,
                        help_text='Ease factor for spaced repetition algorithm',
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(4.0),
                        ],
                    ),
                ),
                (
                    'performance_history',
                    models.JSONField(
                        default=list,
                        help_text='History of performance scores over time',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'user',
                    models.ForeignKey(
                        help_text='User learning this concept',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='concept_masteries',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'concept',
                    models.ForeignKey(
                        help_text='Grammar concept being tracked',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='user_masteries',
                        to='chat.grammarconcept',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Concept Mastery',
                'verbose_name_plural': 'Concept Masteries',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'current_level',
                    models.CharField(
                        choices=[
                            ('A1', 'A1 - Beginner'),
                            ('A2', 'A2 - Elementary'),
                            ('B1', 'B1 - Intermediate'),
                            ('B2', 'B2 - Upper-Intermediate'),
                            ('C1', 'C1 - Advanced'),
                            ('C2', 'C2 - Proficient'),
                        ],
                        default='A1',
                        help_text='Current estimated CEFR level',
                        max_length=2,
                    ),
                ),
                (
                    'target_language',
                    models.CharField(
                        choices=[
                            ('en', 'English'),
                            ('es', 'Spanish'),
                            ('de', 'German'),
                        ],
                        default='en',
                        help_text='Primary target language being learned',
                        max_length=2,
                    ),
                ),
                (
                    'native_language',
                    models.CharField(
                        choices=[
                            ('en', 'English'),
                            ('es', 'Spanish'),
                            ('de', 'German'),
                        ],
                        default='en',
                        help_text="User's native language for analysis feedback",
                        max_length=2,
                    ),
                ),
                (
                    'total_messages',
                    models.IntegerField(
                        default=0, help_text='Total messages sent by user'
                    ),
                ),
                (
                    'study_streak_days',
                    models.IntegerField(
                        default=0, help_text='Current consecutive days of practice'
                    ),
                ),
                (
                    'last_activity',
                    models.DateTimeField(
                        auto_now=True, help_text='Last time user practiced'
                    ),
                ),
                (
                    'preferences',
                    models.JSONField(
                        default=dict, help_text='User learning preferences and settings'
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'user',
                    models.OneToOneField(
                        help_text='Associated user account',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='language_profile',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name': 'User Language Profile',
                'verbose_name_plural': 'User Language Profiles',
            },
        ),
        migrations.AddIndex(
            model_name='grammarconcept',
            index=models.Index(
                fields=['language', 'cefr_level'], name='chat_gramma_languag_f3a3e6_idx'
            ),
        ),
        migrations.AddIndex(
            model_name='grammarconcept',
            index=models.Index(
                fields=['complexity_score'], name='chat_gramma_complex_eb5038_idx'
            ),
        ),
        migrations.AlterUniqueTogether(
            name='grammarconcept',
            unique_together={('name', 'language')},
        ),
        migrations.AddIndex(
            model_name='errorpattern',
            index=models.Index(
                fields=['user', 'error_type'], name='chat_errorp_user_id_56b630_idx'
            ),
        ),
        migrations.AddIndex(
            model_name='errorpattern',
            index=models.Index(
                fields=['frequency'], name='chat_errorp_frequen_663e9f_idx'
            ),
        ),
        migrations.AddIndex(
            model_name='errorpattern',
            index=models.Index(
                fields=['last_seen'], name='chat_errorp_last_se_673cbb_idx'
            ),
        ),
        migrations.AddIndex(
            model_name='conceptmastery',
            index=models.Index(
                fields=['user', 'mastery_score'], name='chat_concep_user_id_f58302_idx'
            ),
        ),
        migrations.AddIndex(
            model_name='conceptmastery',
            index=models.Index(
                fields=['next_review'], name='chat_concep_next_re_4227db_idx'
            ),
        ),
        migrations.AddIndex(
            model_name='conceptmastery',
            index=models.Index(
                fields=['last_practiced'], name='chat_concep_last_pr_f77135_idx'
            ),
        ),
        migrations.AlterUniqueTogether(
            name='conceptmastery',
            unique_together={('user', 'concept')},
        ),
    ]
