"""
Django settings for findus project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from typing import List

import dj_database_url
import logfire
from dotenv import load_dotenv

# Load environment variables from a `.env` file located in the project root.
# This must be done **before** we reference any env vars (e.g. GEMINI_API_KEY).
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY = os.getenv('SECRET_KEY', 'SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Explicit type annotation so static type-checkers (mypy, Pyright, etc.) know
# the expected value type.
ALLOWED_HOSTS: List[str] = os.getenv(
    'ALLOWED_HOSTS', 'localhost,127.0.0.1,0.0.0.0'
).split(',')

# On Heroku, use wildcard since Heroku router validates Host header
if os.getenv('DATABASE_URL'):
    ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'django_extensions',
    'django_ratelimit',
    'webpack_loader',
    # Local apps
    'chat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'findus.ratelimit_middleware.RateLimitMiddleware',
]

ROOT_URLCONF = 'findus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'findus.wsgi.application'
ASGI_APPLICATION = 'findus.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use PostgreSQL - mandatory for both production and local development
if os.getenv('DATABASE_URL'):
    # Production/Heroku PostgreSQL
    DATABASES = {
        'default': dj_database_url.config(
            default=os.getenv('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Local development PostgreSQL - required
    postgres_db = os.getenv('POSTGRES_DB')
    postgres_user = os.getenv('POSTGRES_USER')
    postgres_password = os.getenv('POSTGRES_PASSWORD')
    postgres_host = os.getenv('POSTGRES_HOST', 'localhost')
    postgres_port = os.getenv('POSTGRES_PORT', '5432')

    if not all([postgres_db, postgres_user, postgres_password]):
        raise RuntimeError(
            "PostgreSQL configuration required for local development.\n"
            "Set these environment variables in your .env file:\n"
            "POSTGRES_DB=findus\n"
            "POSTGRES_USER=findus\n"
            "POSTGRES_PASSWORD=your_password\n"
            "POSTGRES_HOST=localhost  # optional, defaults to localhost\n"
            "POSTGRES_PORT=5432       # optional, defaults to 5432\n\n"
            "Start PostgreSQL with: docker-compose up -d postgres"
        )

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': postgres_db,
            'USER': postgres_user,
            'PASSWORD': postgres_password,
            'HOST': postgres_host,
            'PORT': postgres_port,
            'CONN_MAX_AGE': 0,  # Disable persistent connections for async
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --------------------------------------------------------------------------- #
# Google Gemini API                                                           #
# --------------------------------------------------------------------------- #

# Fetch the API key from the environment.  Expect developers to create a
# local ``.env`` file (ignored via .gitignore) with::
#     GEMINI_API_KEY=your_api_key_here
#
# This avoids accidentally leaking credentials in source control.

GEMINI_API_KEY: str | None = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY and not os.getenv(
    'DATABASE_URL'
):  # Allow missing key in production if not needed
    raise RuntimeError(
        "GEMINI_API_KEY not set.\n"
        "Create a `.env` file in the project root with a line like:\n"
        "GEMINI_API_KEY=your_api_key_here"
    )

# --------------------------------------------------------------------------- #
# Logfire configuration                                                       #
# --------------------------------------------------------------------------- #

LOGFIRE_TOKEN: str | None = os.getenv("LOGFIRE_KEY")

if LOGFIRE_TOKEN:
    logfire.configure(
        token=LOGFIRE_TOKEN,
        service_name="findus-django",
        service_version="1.0.0",
        environment="production" if os.getenv('DATABASE_URL') else "development",
    )

    logfire.instrument_django()
    if not os.getenv('DATABASE_URL'):  # Only instrument SQLite in development
        logfire.instrument_sqlite3()
    logfire.instrument_pydantic_ai()
elif not os.getenv('DATABASE_URL'):  # Only require in development
    raise RuntimeError(
        "LOGFIRE_KEY not set.\n"
        "Create a `.env` file in the project root with a line like:\n"
        "LOGFIRE_KEY=your_logfire_key_here"
    )

# --------------------------------------------------------------------------- #
# Django-Extensions configuration                                             #
# --------------------------------------------------------------------------- #

# Use IPython for the excellent auto-import and rich-traceback experience
# provided by django-extensionsâ€™ *shell_plus* command.
SHELL_PLUS = "ipython"

# ---------------------------------------------------------------------------
# Authentication redirects
# ---------------------------------------------------------------------------
# Where Django should redirect unauthenticated users who attempt to access
# `@login_required` views.
LOGIN_URL = 'login'
# Where to send users right after a successful login (when no `next` parameter
# is present in the URL).  We point to the chat landing page.
LOGIN_REDIRECT_URL = 'home'
# After logging out, users are returned to the login page.
LOGOUT_REDIRECT_URL = 'login'

# ---------------------------------------------------------------------------
# Session Configuration for Rate Limiting
# ---------------------------------------------------------------------------
# Use database-based sessions for rate limiting instead of cookie-based
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True

# ---------------------------------------------------------------------------
# Rate Limiting Configuration
# ---------------------------------------------------------------------------
# Disable rate limiting for local development (enabled by default in production)
DISABLE_RATELIMIT = os.getenv('DISABLE_RATELIMIT', 'True').lower() == 'true'

# ---------------------------------------------------------------------------
# Cache Configuration for Rate Limiting
# ---------------------------------------------------------------------------
# Use custom database cache with atomic increment support for rate limiting
# For production with heavy load, consider Redis for better performance
CACHES = {
    'default': {
        'BACKEND': 'findus.cache_backends.RateLimitDatabaseCache',
        'LOCATION': 'rate_limit_cache_table',
    }
}

# ---------------------------------------------------------------------------
# Webpack Loader Configuration
# ---------------------------------------------------------------------------
WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        'BUNDLE_DIR_NAME': 'chat/js/',  # must end with slash
        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
        'POLL_INTERVAL': 0.1,
        'TIMEOUT': None,
        'IGNORE': [r'.+\.hot-update.js', r'.+\.map'],
        'LOADER_CLASS': 'webpack_loader.loader.WebpackLoader',
    }
}
